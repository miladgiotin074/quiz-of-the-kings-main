# تحلیل کامل صفحه Chats - Quiz of the Kings

## هدف کلی صفحه
صفحه Chats به عنوان مرکز مدیریت مکالمات کاربر عمل می‌کند و لیستی از تمام چت‌های فعال و غیرفعال کاربر را نمایش می‌دهد. این صفحه نقطه ورود اصلی برای دسترسی به مکالمات مختلف است.

## بخش‌های موجود و قابلیت‌های فعلی

### 1. Header و Navigation
- استفاده از کامپوننت `Page` برای مدیریت ناوبری
- پشتیبانی کامل از RTL
- مدیریت دکمه بازگشت تلگرام

### 2. لیست چت‌ها (Chat List)
- نمایش لیست کامل چت‌های کاربر
- هر آیتم چت شامل:
  - آواتار کاربر با نشانگر آنلاین/آفلاین
  - نام کاربر
  - آخرین پیام
  - زمان آخرین پیام
  - تعداد پیام‌های خوانده نشده
  - وضعیت آنلاین/آفلاین

### 3. Empty State
- نمایش پیام مناسب در صورت عدم وجود چت
- آیکون و متن راهنما برای کاربران جدید

### 4. Interactive Elements
- کلیک روی هر چت برای ورود به صفحه مکالمه
- انیمیشن‌های hover و active
- ناوبری روان با استفاده از `useDelayedAction`

## سناریوهای کاربری

### 1. مشاهده لیست چت‌ها
- کاربر وارد صفحه چت‌ها می‌شود
- لیست تمام مکالمات نمایش داده می‌شود
- چت‌ها بر اساس آخرین فعالیت مرتب شده‌اند

### 2. ورود به مکالمه
- کاربر روی یک چت کلیک می‌کند
- انتقال به صفحه مکالمه مربوطه
- حفظ context چت انتخاب شده

### 3. مدیریت پیام‌های خوانده نشده
- نمایش تعداد پیام‌های خوانده نشده
- به‌روزرسانی خودکار پس از خواندن پیام‌ها
- نشانگر بصری برای چت‌های دارای پیام جدید

### 4. نمایش وضعیت کاربران
- نشانگر آنلاین/آفلاین برای هر کاربر
- به‌روزرسانی Real-time وضعیت کاربران

## نیازهای Backend

### 1. Chat Management API

#### GET /api/chats
```json
{
  "chats": [
    {
      "id": 1,
      "participant": {
        "id": 123,
        "name": "سارا محمدی",
        "username": "sara_mohammadi",
        "avatar": "avatar_url",
        "isOnline": true,
        "lastSeen": "2024-01-15T10:30:00Z"
      },
      "lastMessage": {
        "id": 456,
        "content": "سلام! بازی جدید رو شروع کردی؟",
        "timestamp": "2024-01-15T10:30:00Z",
        "senderId": 123,
        "messageType": "text"
      },
      "unreadCount": 2,
      "updatedAt": "2024-01-15T10:30:00Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 15,
    "hasMore": false
  }
}
```

#### GET /api/chats/:chatId/unread-count
```json
{
  "chatId": 1,
  "unreadCount": 3
}
```

### 2. Real-time Updates (WebSocket)

#### Events از Server به Client:
- `chat_list_updated` - به‌روزرسانی لیست چت‌ها
- `new_message_received` - پیام جدید دریافت شده
- `user_status_changed` - تغییر وضعیت آنلاین/آفلاین
- `unread_count_updated` - به‌روزرسانی تعداد پیام‌های خوانده نشده

#### Events از Client به Server:
- `subscribe_to_chat_updates` - عضویت در به‌روزرسانی‌های چت
- `mark_chat_as_read` - علامت‌گذاری چت به عنوان خوانده شده

### 3. User Presence System
- ردیابی وضعیت آنلاین/آفلاین کاربران
- به‌روزرسانی Real-time وضعیت

## نکات مهم

### اولویت‌های پیاده‌سازی Backend:
1. **Chat Management API** - بالاترین اولویت
2. **Real-time WebSocket** - برای به‌روزرسانی‌های فوری
3. **User Presence System** - نمایش وضعیت آنلاین/آفلاین
4. **Unread Count Management** - مدیریت پیام‌های خوانده نشده

## وضعیت فعلی و نتیجه‌گیری

### وضعیت Backend: ❌ نیاز به پیاده‌سازی
- API endpoints مورد نیاز
- Real-time WebSocket connection
- User presence system

صفحه Chats از نظر UI/UX کاملاً آماده است و تنها نیاز به پیاده‌سازی backend و اتصال API‌ها دارد. این صفحه به عنوان hub اصلی مکالمات کاربر عمل می‌کند و پایه‌ای قوی برای سیستم چت فراهم می‌کند.
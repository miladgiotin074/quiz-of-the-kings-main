# تحلیل صفحه Question Factory (کارخانه سوال)

═══════════════════════════════════════════════════════════════════

## هدف کلی صفحه

صفحه Question Factory یک سیستم مدیریت سوالات است که به کاربران امکان ثبت سوالات جدید و مشاهده لیست سوالات ثبت شده را می‌دهد. این صفحه به عنوان یک ابزار تولید محتوا برای بازی‌های کوییز عمل می‌کند.

═══════════════════════════════════════════════════════════════════

## بخش‌های موجود و قابلیت‌های مورد نیاز

### 1. سیستم Tab Navigation
- ✅ دو تب اصلی: "ثبت سوال" و "لیست سوالات"
- ✅ تغییر بین تب‌ها با QuickActionButton
- ✅ نمایش آیکون مناسب برای هر تب
- ✅ تغییر رنگ تب فعال

### 2. فرم ثبت سوال (تب Create)
- ✅ فیلد متن سوال با textarea
- ✅ چهار گزینه پاسخ با input های جداگانه
- ✅ انتخاب پاسخ صحیح با radio button
- ✅ اعتبارسنجی کامل فرم
- ✅ دکمه ثبت با حالت loading
- ✅ پاک کردن فرم پس از ثبت موفق
- 📝 **نیاز به**: اتصال به API واقعی

### 3. لیست سوالات (تب List)
- ✅ نمایش سوالات با اطلاعات کامل
- ✅ نمایش وضعیت سوال (تایید شده، رد شده، بررسی نشده)
- ✅ آیکون و رنگ مناسب برای هر وضعیت
- ✅ نمایش تاریخ ثبت سوال
- ✅ نمایش گزینه‌ها با مشخص کردن پاسخ صحیح
- ✅ حالت خالی بودن لیست
- 📝 **نیاز به**: دریافت داده‌های واقعی از API

### 4. مدیریت وضعیت (State Management)
- ✅ مدیریت state فرم ثبت سوال
- ✅ مدیریت لیست سوالات
- ✅ مدیریت تب فعال
- ✅ مدیریت حالت loading

═══════════════════════════════════════════════════════════════════

## سناریوهای کاربری

### 1. ثبت سوال جدید
**مراحل:**
1. کاربر وارد تب "ثبت سوال" می‌شود
2. متن سوال را وارد می‌کند
3. چهار گزینه پاسخ را پر می‌کند
4. پاسخ صحیح را انتخاب می‌کند
5. دکمه "ثبت سوال" را می‌زند
6. سیستم اعتبارسنجی انجام می‌دهد
7. در صورت موفقیت، سوال ثبت و فرم پاک می‌شود
8. کاربر به تب "لیست سوالات" هدایت می‌شود

**نتیجه مورد انتظار:**
- سوال با وضعیت "بررسی نشده" در لیست اضافه شود
- پیام موفقیت نمایش داده شود
- فرم پاک شود

### 2. مشاهده لیست سوالات
**مراحل:**
1. کاربر وارد تب "لیست سوالات" می‌شود
2. لیست سوالات ثبت شده نمایش داده می‌شود
3. کاربر می‌تواند وضعیت هر سوال را ببیند
4. پاسخ صحیح هر سوال مشخص شده است

**نتیجه مورد انتظار:**
- نمایش کامل اطلاعات سوالات
- تشخیص آسان وضعیت هر سوال
- نمایش مناسب پاسخ صحیح

### 3. خطا در ثبت سوال
**مراحل:**
1. کاربر فرم را ناقص پر می‌کند
2. دکمه ثبت را می‌زند
3. سیستم خطای اعتبارسنجی نمایش می‌دهد

**نتیجه مورد انتظار:**
- نمایش پیام خطای مناسب
- عدم ثبت سوال ناقص
- حفظ اطلاعات وارد شده

### 4. لیست خالی
**مراحل:**
1. کاربر وارد تب لیست می‌شود
2. هیچ سوالی ثبت نشده است

**نتیجه مورد انتظار:**
- نمایش پیام "هیچ سوالی ثبت نشده است"
- UI مناسب برای حالت خالی

═══════════════════════════════════════════════════════════════════

## نیازهای Backend

### 1. مدیریت سوالات
- **Question CRUD API**: ثبت و دریافت سوالات
- **Question Validation**: اعتبارسنجی محتوای سوالات
- **Status Management**: مدیریت وضعیت سوالات (pending, approved, rejected)

═══════════════════════════════════════════════════════════════════

## نکات مهم

### 📝 نکات توسعه:
- UI کاملاً آماده و نیازی به تغییر ندارد
- فقط نیاز به اتصال به backend دارد
# تحلیل صفحه Quiz Game (بازی کوییز)

═══════════════════════════════════════════════════════════════════

## هدف کلی صفحه

صفحه Quiz Game هسته اصلی بازی کوییز است که تجربه بازی واقعی را ارائه می‌دهد. این صفحه شامل نمایش سوالات، مدیریت زمان، سیستم امتیازدهی، دکمه‌های کمکی و تعامل کامل کاربر با بازی است.

═══════════════════════════════════════════════════════════════════

## بخش‌های موجود و قابلیت‌های مورد نیاز

### 1. Header و نمایش امتیازات
- ✅ نمایش امتیاز بازیکن و حریف (4-3)
- ✅ طراحی متقارن و زیبا
- ✅ استفاده از اعداد فارسی
- ✅ پس‌زمینه شفاف با backdrop-blur
- ✅ نشانگر مراحل بازی (Progress Indicators)

### 2. سیستم نشانگر مراحل
- ✅ نمایش 3 دایره برای 3 سوال
- ✅ رنگ‌بندی پویا:
  - خاکستری: سوال‌های باقی‌مانده
  - سبز: پاسخ صحیح
  - قرمز: پاسخ غلط
- ✅ انیمیشن‌های زیبا (hover, pulse)
- ✅ Shadow effects سه‌بعدی

### 3. کارت سوال (QuestionCard)
- ✅ انیمیشن flip سه‌بعدی
- ✅ حالت جلو: آیکون سوال با انیمیشن shimmer
- ✅ حالت پشت: متن سوال + badge موضوع
- ✅ انیمیشن چرخش برای سوال بعدی
- ✅ طراحی gradient زیبا

### 4. سیستم تایمر
- ✅ Progress bar 30 ثانیه‌ای
- ✅ رنگ‌بندی پویا:
  - سبز: بیش از 10 ثانیه
  - زرد/نارنجی: 5-10 ثانیه
  - قرمز با pulse: کمتر از 5 ثانیه
- ✅ مدیریت خودکار timeout
- ✅ Shadow effect برای حالت خطر

### 5. گزینه‌های پاسخ
- ✅ 4 کارت پاسخ در grid 2x2
- ✅ استفاده از AnswerCard component
- ✅ نمایش وضعیت پس از انتخاب:
  - سبز: پاسخ صحیح
  - قرمز: پاسخ غلط انتخاب شده
- ✅ غیرفعال شدن پس از انتخاب
- ✅ مدیریت timeout (پاسخ -1)

### 6. دکمه‌های کمکی
- ✅ جواب مردم (UserGroupIcon) - 60 سکه
- ✅ حذف دو گزینه (XMarkIcon) - 40 سکه
- ✅ شانس مجدد (ArrowPathIcon) - 40 سکه
- ✅ غیرفعال شدن پس از استفاده
- ✅ طراحی QuickActionButton سبز

### 7. مدیریت جریان بازی
- ✅ دکمه "نمایش سوال" برای شروع
- ✅ دکمه "سوال بعدی" پس از پاسخ
- ✅ دکمه "پایان بازی" برای آخرین سوال
- ✅ مدیریت state پیچیده و دقیق

### 8. سیستم امتیازدهی
- ✅ افزایش امتیاز برای پاسخ صحیح
- ✅ ذخیره نتایج هر مرحله
- ✅ مدیریت امتیاز بازیکن و حریف

═══════════════════════════════════════════════════════════════════

## سناریوهای کاربری

### 1. شروع بازی و نمایش سوال
**مراحل:**
1. کاربر وارد صفحه بازی می‌شود
2. دکمه "نمایش سوال" را می‌زند
3. کارت سوال flip می‌شود و سوال نمایش داده می‌شود
4. تایمر 30 ثانیه‌ای شروع می‌شود
5. گزینه‌های پاسخ فعال می‌شوند

**نتیجه مورد انتظار:**
- انیمیشن روان flip
- شروع تایمر
- فعال شدن تعامل کاربر

### 2. انتخاب پاسخ صحیح
**مراحل:**
1. کاربر پاسخ صحیح را انتخاب می‌کند
2. تایمر متوقف می‌شود
3. پاسخ صحیح سبز می‌شود
4. امتیاز بازیکن +1 می‌شود
5. نشانگر مرحله سبز می‌شود
6. دکمه "سوال بعدی" ظاهر می‌شود

**نتیجه مورد انتظار:**
- feedback بصری مناسب
- به‌روزرسانی امتیاز
- آماده شدن برای سوال بعدی

### 3. انتخاب پاسخ غلط
**مراحل:**
1. کاربر پاسخ غلط را انتخاب می‌کند
2. پاسخ انتخابی قرمز می‌شود
3. پاسخ صحیح سبز نمایش داده می‌شود
4. نشانگر مرحله قرمز می‌شود
5. امتیاز تغییر نمی‌کند

**نتیجه مورد انتظار:**
- نمایش پاسخ صحیح
- feedback آموزشی
- ادامه بازی

### 4. timeout زمان
**مراحل:**
1. کاربر هیچ پاسخی انتخاب نمی‌کند
2. تایمر به صفر می‌رسد
3. خودکار پاسخ -1 ثبت می‌شود
4. پیام "زمان تمام شد!" نمایش داده می‌شود
5. پاسخ صحیح نمایش داده می‌شود

**نتیجه مورد انتظار:**
- مدیریت خودکار timeout
- اطلاع‌رسانی واضح
- ادامه بازی

### 5. استفاده از دکمه‌های کمکی
**مراحل:**
1. کاربر یکی از دکمه‌های کمکی را می‌زند
2. دکمه غیرفعال می‌شود
3. کمک مربوطه اعمال می‌شود
4. سکه کسر می‌شود

**نتیجه مورد انتظار:**
- اعمال کمک
- غیرفعال شدن دکمه
- کسر سکه

### 6. انتقال به سوال بعدی
**مراحل:**
1. کاربر "سوال بعدی" را می‌زند
2. انیمیشن چرخش اجرا می‌شود
3. سوال جدید بارگذاری می‌شود
4. تایمر reset می‌شود
5. دکمه‌های کمکی reset می‌شوند

**نتیجه مورد انتظار:**
- انیمیشن روان
- reset کامل state
- آماده شدن برای سوال جدید

### 7. پایان بازی
**مراحل:**
1. آخرین سوال پاسخ داده می‌شود
2. دکمه "پایان بازی" ظاهر می‌شود
3. کاربر آن را می‌زند
4. به صفحه نتایج هدایت می‌شود

**نتیجه مورد انتظار:**
- محاسبه نتیجه نهایی
- نمایش آمار
- هدایت مناسب

═══════════════════════════════════════════════════════════════════

## نیازهای Backend

### 1. سیستم مدیریت سوالات
- **Question Bank API**: دریافت سوالات از بانک سوال
- **Category Management**: مدیریت دسته‌بندی سوالات
- **Question Validation**: اعتبارسنجی سوالات

### 2. سیستم بازی Real-time
- **Game Session Management**: مدیریت جلسه بازی
- **Real-time Sync**: همگام‌سازی با حریف
- **Answer Submission**: ثبت پاسخ‌ها
- **Score Calculation**: محاسبه امتیاز

### 3. سیستم کمک‌ها
- **Help Usage Tracking**: پیگیری استفاده از کمک‌ها
- **Coin Management**: مدیریت سکه‌ها
- **People's Answers**: نظرسنجی واقعی
- **Option Removal**: منطق حذف گزینه‌ها

### 4. مدیریت جلسه
- **Session State**: وضعیت جلسه بازی
- **Reconnection**: اتصال مجدد
- **Game Recovery**: بازیابی بازی
- **Timeout Handling**: مدیریت timeout

═══════════════════════════════════════════════════════════════════

## جزئیات فنی پیاده‌سازی

### 1. مدیریت State پیچیده
```javascript
// State های اصلی
const [currentStep, setCurrentStep] = useState(0);
const [playerScore, setPlayerScore] = useState(4);
const [opponentScore, setOpponentScore] = useState(3);
const [isQuestionVisible, setIsQuestionVisible] = useState(false);
const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
const [showResult, setShowResult] = useState(false);
const [timeLeft, setTimeLeft] = useState(30);
const [stepResults, setStepResults] = useState<boolean[]>([]);
```

### 2. سیستم تایمر پیشرفته
```javascript
useEffect(() => {
  let interval: NodeJS.Timeout;
  if (isTimerActive && timeLeft > 0 && !timerStopped) {
    interval = setInterval(() => {
      setTimeLeft(prev => prev - 1);
    }, 1000);
  } else if (timeLeft === 0 && isTimerActive) {
    // مدیریت timeout
    setSelectedAnswer(-1);
    setShowResult(true);
  }
  return () => clearInterval(interval);
}, [isTimerActive, timeLeft, timerStopped, showResult, currentStep]);
```

### 3. انیمیشن‌های CSS سفارشی
```css
@keyframes shimmer {
  0% { transform: translateX(-100%); }
  100% { transform: translateX(100%); }
}

.animate-shimmer {
  animation: shimmer 2s infinite;
}

.perspective-1000 {
  perspective: 1000px;
}
```

### 4. منطق امتیازدهی
```javascript
const handleAnswerSelect = useCallback((answerIndex: number) => {
  const isCorrect = answerIndex === currentQuestion.correctAnswer;
  if (isCorrect) {
    setPlayerScore(prev => prev + 1);
  }
  
  setStepResults(prev => {
    const newResults = [...prev];
    newResults[currentStep] = isCorrect;
    return newResults;
  });
}, [currentQuestion.correctAnswer, currentStep]);
```

═══════════════════════════════════════════════════════════════════

## نکات مهم

### 🔧 اولویت‌های پیاده‌سازی:
1. **Real-time Game API**: همگام‌سازی با حریف
2. **Question Bank Integration**: اتصال به بانک سوال
3. **Help System Backend**: پیاده‌سازی کمک‌ها

### 📝 نکات توسعه:
- کد بسیار تمیز و سازماندهی شده
- استفاده مناسب از React hooks
- مدیریت memory leaks با cleanup
- انیمیشن‌های بهینه و سبک
- Error handling مناسب

### 🚀 نکات امنیتی:
- **Answer Validation**: اعتبارسنجی پاسخ‌ها در سرور
- **Time Sync**: همگام‌سازی زمان با سرور
- **Cheat Prevention**: جلوگیری از تقلب
- **Session Security**: امنیت جلسه بازی